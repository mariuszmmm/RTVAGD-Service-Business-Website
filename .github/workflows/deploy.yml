name: Build and Deploy

on:
  push:
    branches:
      - main
  schedule:
    # - cron: "5 0 * * *"
    - cron: "*/5 * * * *"
  workflow_dispatch:

concurrency:
  group: single-workflow
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Install lftp
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: sudo apt-get install -y lftp

      - name: Pobierz plik reviews.json
        run: |
          echo "Pobieranie pliku reviews.json z FTP"
          lftp -f "
          open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
          set xfer:clobber on
          cd /public_html/data/serwis
          cls reviews.json && (
            get reviews.json -o reviews.json
          ) || echo 'Plik reviews.json nie istnieje. Operacja pominięta.'
          quit
          "

      - name: Sprawdź zawartość pliku reviews.json
        run: |
          REVIEWS=false
          REVIEWS_TIME=""

          if [ -f reviews.json ] && jq empty reviews.json >/dev/null 2>&1; then
            REVIEWS=true
            REVIEWS_TIME=$(jq -r '.update_time' reviews.json)   
            echo "Pliku reviews.json jest poprawny"
          else
            echo "Brak pliku reviews.json lub jest on niepoprawny"
          fi  

          echo "REVIEWS=$REVIEWS" >> $GITHUB_ENV
          echo "REVIEWS_TIME=$REVIEWS_TIME" >> $GITHUB_ENV

      - name: Pobierz plik reviewsCopy.json
        run: |
          echo "Pobieranie pliku reviewsCopy.json z FTP"
          lftp -f "
          open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
          set xfer:clobber on
          cd /public_html/data/serwis
          cls reviews.json && (
            get reviewsCopy.json -o reviewsCopy.json
          ) || echo 'Plik reviewsCopy.json nie istnieje. Operacja pominięta.'
          quit
          "

      - name: Sprawdź zawartość pliku reviewsCopy.json
        run: |
          REVIEWS_COPY=false
          REVIEWS_COPY_TIME="" 

          if [ -f reviewsCopy.json ] && jq empty reviewsCopy.json >/dev/null 2>&1; then
            REVIEWS_COPY=true
            REVIEWS_COPY_TIME=$(jq -r '.update_time' reviewsCopy.json)
            echo "Pliku reviewsCopy.json jest poprawny"
          else
            echo "Brak pliku reviewsCopy.json lub jest on niepoprawny"
          fi

          echo "REVIEWS_COPY=$REVIEWS_COPY" >> $GITHUB_ENV
          echo "REVIEWS_COPY_TIME=$REVIEWS_COPY_TIME" >> $GITHUB_ENV

      - name: Czy potrzebna aktualizacja?
        run: |
          UPDATE_NEEDED=false

          if [ "$REVIEWS_TIME" != "$REVIEWS_COPY_TIME" ] && [ "$REVIEWS" = "true" ] && [ "$REVIEWS_COPY" = "true" ]; then
            UPDATE_NEEDED=true
            echo "Czas aktualizacji jest różny. Ustawiono UPDATE_NEEDED=true."
          else
            echo "Czas aktualizacji jest taki sam lub brak danych. Ustawiono UPDATE_NEEDED=false."
          fi

          echo "UPDATE_NEEDED=$UPDATE_NEEDED" >> $GITHUB_ENV

          echo "REVIEWS_TIME: $REVIEWS_TIME"
          echo "REVIEWS_COPY_TIME: $REVIEWS_COPY_TIME"
          echo "REVIEWS: $REVIEWS"
          echo "REVIEWS_COPY: $REVIEWS_COPY"
          echo "UPDATE_NEEDED: $UPDATE_NEEDED"

      - name: Copy reviews.json
        if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
        run: |
          echo "Kopiowanie reviews.json"
          lftp -f "
          open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
          set xfer:clobber on
          cd /public_html/data/serwis
          cls reviews.json && (
            mkdir -p /public_html/serwis
            mkdir -p /public_html/serwis/api
            get reviews.json -o reviews.json
            put reviews.json -o /public_html/serwis/api/reviews.json
            put reviews.json -o /public_html/data/serwis/reviewsCopy.json
          ) || echo 'Plik reviews.json nie istnieje. Operacja pominięta.'
          quit
          "

      - name: Checkout repository
        if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
        uses: actions/checkout@v2

      - name: Set up Node.js
        if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install dependencies
        if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
        run: |
          npm ci || npm install

      - name: Build the application
        if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
        env:
          NEXT_PUBLIC_SERVICE_ID: ${{ secrets.SERVICE_ID }}
          NEXT_PUBLIC_TEMPLATE_ID: ${{ secrets.TEMPLATE_ID }}
          NEXT_PUBLIC_PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
          NEXT_PUBLIC_GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          NEXT_PUBLIC_PLACE_ID: ${{ secrets.PLACE_ID }}
        run: npm run build

      - name: Deploy to FTP
        if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
        run: |
          lftp -f "
          open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
          lcd ./out
          mirror -R . /public_html/serwis_new
          quit
          "

      # - name: Set copy folder name
      #   if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
      #   run: echo "COPY_FOLDER_NAME=serwis_$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Rename directories for push
        if: github.event_name == 'push' && env.UPDATE_NEEDED == 'false'
        run: |
          echo "Zmienianie nazw katalogów"
          lftp -f "
          open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
          set xfer:clobber on
          mkdir -p /public_html/serwis_old
          mkdir -p /public_html/serwis
          mv /public_html/serwis_old /public_html/serwis_to_delete
          mv /public_html/serwis /public_html/serwis_old
          mv /public_html/serwis_new /public_html/serwis
          rm -r /public_html/serwis_to_delete
          quit
          "

      - name: Rename directories for update
        if: env.UPDATE_NEEDED == 'true'
        run: |
          echo "Zmienianie nazw katalogów"
          lftp -f "
          open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
          set xfer:clobber on
          mkdir -p /public_html/serwis
          mv /public_html/serwis /public_html/serwis_to_delete
          mv /public_html/serwis_new /public_html/serwis
          rm -r /public_html/serwis_to_delete
          quit
          "

      - name: Copy reviews.json for development
        if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
        run: |
          echo "Kopiowanie reviews.json"
          lftp -f "
          open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
          set xfer:clobber on
          cd /public_html/data/serwis
          cls reviews.json && (
            mkdir -p /public_html/serwis/api
            get reviews.json -o reviews.json
            put reviews.json -o /public_html/serwis/api/reviews.json
          ) || echo 'Plik reviews.json nie istnieje. Operacja pominięta.'
          quit
          "
