name: Build and Deploy

on:
  push:
    branches:
      - main
  schedule:
    - cron: "5 0 * * *"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Install lftp
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: sudo apt-get install -y lftp

      # - name: Pobierz plik reviews.json
      #   run: curl -o reviews.json https://naprawaprzemysl.pl/api/reviews.json

      # - name: Sprawdź zawartość pliku reviews.json
      #   run: |
      #     REVIEWS=false
      #     REVIEWS_TIME=""

      #     if [ -f reviews.json ] && jq empty reviews.json >/dev/null 2>&1; then
      #       REVIEWS=true
      #       REVIEWS_TIME=$(jq -r '.update_time' reviews.json)
      #       echo "Pliku reviews.json jest poprawny"
      #     else
      #       echo "Brak pliku reviews.json lub jest on niepoprawny"
      #     fi

      #     echo "REVIEWS=$REVIEWS" >> $GITHUB_ENV
      #     echo "REVIEWS_TIME=$REVIEWS_TIME" >> $GITHUB_ENV

      # - name: Pobierz plik reviewsCopy.json
      #   run: curl -o reviewsCopy.json https://naprawaprzemysl.pl/api/reviewsCopy.json

      # - name: Sprawdź zawartość pliku reviewsCopy.json
      #   run: |
      #     REVIEWS_COPY=false
      #     REVIEWS_COPY_TIME=""

      #     if [ -f reviewsCopy.json ] && jq empty reviewsCopy.json >/dev/null 2>&1; then
      #       REVIEWS_COPY=true
      #       REVIEWS_COPY_TIME=$(jq -r '.update_time' reviewsCopy.json)
      #       echo "REVIEWS_COPY=true" >> $GITHUB_ENV
      #       echo "Pliku reviewsCopy.json jest poprawny"
      #     else
      #       echo "Brak pliku reviewsCopy.json lub jest on niepoprawny"
      #     fi

      #     echo "REVIEWS_COPY=$REVIEWS_COPY" >> $GITHUB_ENV
      #     echo "REVIEWS_COPY_TIME=$REVIEWS_COPY_TIME" >> $GITHUB_ENV

      # - name: Czy potrzebna aktualizacja?
      #   run: |
      #     UPDATE_NEEDED=false

      #     if [ "$REVIEWS_TIME" != "$REVIEWS_COPY_TIME" ] && [ "$REVIEWS" = "true" ] && [ "$REVIEWS_COPY" = "true" ]; then
      #       UPDATE_NEEDED=true
      #       echo "Czas aktualizacji jest różny. Ustawiono UPDATE_NEEDED=true."
      #     else
      #       echo "Czas aktualizacji jest taki sam lub brak danych. Ustawiono UPDATE_NEEDED=false."
      #     fi

      #     echo "UPDATE_NEEDED=$UPDATE_NEEDED" >> $GITHUB_ENV

      #     echo "REVIEWS_TIME: $REVIEWS_TIME"
      #     echo "REVIEWS_COPY_TIME: $REVIEWS_COPY_TIME"
      #     echo "REVIEWS: $REVIEWS"
      #     echo "REVIEWS_COPY: $REVIEWS_COPY"
      #     echo "UPDATE_NEEDED: $UPDATE_NEEDED"

      # - name: Checkout repository
      #   if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
      #   uses: actions/checkout@v2

      # - name: Set up Node.js
      #   if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: "20"

      # - name: Install dependencies
      #   if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
      #   run: |
      #     npm ci || npm install

      # - name: Build the application
      #   if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
      #   env:
      #     NEXT_PUBLIC_SERVICE_ID: ${{ secrets.SERVICE_ID }}
      #     NEXT_PUBLIC_TEMPLATE_ID: ${{ secrets.TEMPLATE_ID }}
      #     NEXT_PUBLIC_PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
      #     NEXT_PUBLIC_GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      #     NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      #     NEXT_PUBLIC_PLACE_ID: ${{ secrets.PLACE_ID }}
      #   run: npm run build

      # - name: Deploy to FTP
      #   if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
      #   run: |
      #     lftp -f "
      #     open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #     lcd ./out
      #     mirror -R . /public_html/serwis_new
      #     quit
      #     "

      # - name: Renewing build and deployment
      #   if: github.event_name == 'push' && env.REVIEWS == 'false'
      #   run: |
      #     echo "Tworzenie pliku reviews.json z default_reviews.json"
      #     lftp -f "
      #       open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #       set xfer:clobber on
      #       cd /public_html/data/serwis
      #       get default_reviews.json -o reviews.json
      #       put reviews.json -o /public_html/serwis_new/api/reviews.json
      #       quit
      #     "

      #     if [ -f reviews.json ] && jq empty reviews.json >/dev/null 2>&1; then
      #       echo "Pliku reviews.json został stworzony i jest poprawny"
      #       echo "Ponowny build"
      #       npm run build
      #       echo "Ponowny deploy"
      #       lftp -f "
      #         open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #         lcd ./out
      #         mirror -R . /public_html/serwis_new
      #         quit
      #       "
      #       echo "Tworzenie reviewsCopy.json"
      #       lftp -f "
      #         open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #         set xfer:clobber on
      #         cd /public_html/serwis_new/api
      #         get reviews.json -o reviewsCopy.json
      #         put reviewsCopy.json -o /public_html/serwis_new/api/reviewsCopy.json
      #         quit
      #       "
      #     else
      #       echo "Błąd przy tworzeniu pliku reviews.json"
      #     fi

      # - name: Copy reviews.json
      #   if: github.event_name == 'push' || env.UPDATE_NEEDED == 'true'
      #   run: |
      #     echo "Tworzenie reviewsCopy.json"
      #     lftp -f "
      #     open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #     set xfer:clobber on
      #     cd /public_html/serwis_new/api
      #     get reviews.json -o reviewsCopy.json
      #     put reviewsCopy.json -o /public_html/serwis_new/api/reviewsCopy.json
      #     quit
      #     "

      # - name: Copy .htaccess
      #   if: github.event_name == 'push'
      #   run: |
      #     echo "Kopiowanie .htaccess"
      #     lftp -f "
      #     open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #     set xfer:clobber on
      #     cd /public_html/env/serwis
      #     get .htaccess -o .htaccess
      #     put .htaccess -o /public_html/serwis_new/api/.htaccess
      #     quit
      #     "

      - name: Set copy folder name
        if: github.event_name == 'push'
        run: echo "COPY_FOLDER_NAME=serwis_$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "COPY_FOLDER_NAME set to ${{ env.COPY_FOLDER_NAME }}"

      - name: Check and rename "serwis" directory to "COPY_FOLDER_NAME"
        if: github.event_name == 'push'
        run: |
          lftp -c "
            open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
            cd /public_html
            mv serwis serwis_olddd
            quit
          "

      # test

      # - name: Check and rename "serwis_new" directory to "serwis"
      #   if: github.event_name == 'push'
      #   run: |
      #     lftp -f "
      #     open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #     cd /public_html
      #     if [ -d serwis_new ]; then
      #       mv serwis_new serwis
      #       echo 'Katalog serwis_new został zmieniony na serwis'
      #     else
      #       echo 'Katalog serwis_new nie istnieje'
      #     fi
      #     quit
      #     "

      # - name: Set copy folder name
      #   if: github.event_name == 'push'
      #   run: echo "COPY_FOLDER_NAME=serwis_$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # - name: Deploy copy to FTP
      #   if: github.event_name == 'push'
      #   run: |
      #     lftp -f "
      #     open ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_HOST }}
      #     mirror /public_html/serwis ./local_copy
      #     mirror -R ./local_copy /public_html/${{ env.COPY_FOLDER_NAME }}
      #     quit
      #     "
